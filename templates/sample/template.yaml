apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: sample-template
  title: Just create a clone of the repo
  description: Just create a clone of the repo
  tags:
    - sample
spec:
  owner: automotive
  type: service
  parameters:
    - title: Provide Information for Application
      required:
        - component_id
      properties:
        component_id:
          title: Name
          type: string
          description: Unique name of the component
          default: my-sample-app
          ui:field: EntityNamePicker
          maxLength: 23
        description:
          title: Description
          type: string
          description: Help others understand what this app is for.
          default: A cool sample app

  steps:
    - id: template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./skeleton
        copyWithoutTemplating:
          - .github/workflows/*
        values:
          component_id: ${{ parameters.component_id }}
          description: ${{ parameters.description }}
          namespace: ${{ parameters.component_id }}-dev
          owner: ${{ user.entity.metadata.name }}
          #cluster: .apps.cluster-zgzkk.zgzkk.sandbox2007.opentlc.com
          host: ${{ parameters.repo.host }}
          destination: ${{ parameters.repo.owner }}/${{ parameters.component_id }}

    - id: publish
      name: Publish
      action: publish:gitlab
      input:
        repoUrl: "${{ parameters.repo.host }}?owner=${{ parameters.repo.owner }}&repo=${{parameters.component_id}}"
        repoVisibility: public

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: "/catalog-info.yaml"

    #- id: template-gitops-deployment
    #  name: Generating Deployment Resources
    #  action: fetch:template
    #  input:
    #    url: ./manifests
    #    copyWithoutTemplating: []
    #    values:
    #      component_id: ${{ parameters.component_id }}
    #      description: ${{ parameters.description }}
    #      destination: https://${{ parameters.repo.host }}/${{ parameters.repo.owner }}/${{parameters.component_id}}-gitops.git
    #      source_repository: https://${{ parameters.repo.host }}/${{ parameters.repo.owner }}/${{parameters.component_id}}.git
    #      repository_name: ${{parameters.component_id}}
    #      git_owner: ${{ parameters.repo.owner }}
    #      cluster: .apps.cluster-zgzkk.zgzkk.sandbox2007.opentlc.com
    #      namespace: ${{ parameters.component_id }}-dev
    #      image_registry: ${{ parameters.image_registry }}
    #      image_host: ${{ parameters.image_host }}
    #      image_organization: ${{ parameters.image_organization }}
    #      image_name: ${{ parameters.component_id }}
    #      image_tag: ${{ parameters.image_tag }}
    #      port: 8080
    #      repository_host: ${{ parameters.repo.host }}
    #      deployment_name: quarkus-template
    #      user: ${{ user.entity.metadata.name }}
    #      verify_commits: ${{ parameters.repo.verify_commits }}
    #    targetPath: ./tenant-gitops

    #- id: publish-gitops
    #  name: Publishing to Resource Repository
    #  action: publish:gitlab
    #  input:
    #    repoUrl: "${{ parameters.repo.host }}?owner=${{ parameters.repo.owner }}&repo=${{parameters.component_id}}-gitops"
    #    title: gitops resources for ${{ parameters.component_id }}
    #    description: gitops resources for ${{ parameters.component_id }}
    #    sourcePath: ./tenant-gitops
    #    repoVisibility: public

    #- id: create-argocd-resources
    #  name: Create ArgoCD Resources
    #  action: argocd:create-resources
    #  input:
    #    appName: ${{ parameters.component_id }}-bootstrap
    #    argoInstance: main
    #    namespace: janus-argocd
    #    repoUrl: https://${{ parameters.repo.host }}/${{ parameters.repo.owner }}/${{ parameters.component_id }}-gitops.git
    #    path: "argocd/"

  output:
    links:
      - title: Source Code Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open Component in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}

# Implement your tasks here
# -------------------------------------------------

- name: lookup group id
  uri:
    url: https://{{ gitlab_host }}/api/v4/groups?search={{ templates_repo_group }}
    method: GET
    validate_certs: false
  register: r_group
  until: r_group.status == 200 or r_group.status == 403
  retries: 5
  delay: 10

- name: register group id
  set_fact:
    group_id: "{{ r_group.json[0].id }}"
  when: r_group.status == 200

- name: create a new project
  uri:
    url: https://{{ gitlab_host }}/api/v4/projects/
    method: POST
    body_format: form-urlencoded
    body:
      name: "{{ templates_repo_name }}"
      path: "{{ templates_repo_name }}"
      namespace_id: "{{ group_id }}"
      visibility: "public"
      import_url: "{{ templates_repo_url }}.git"
    headers:
      PRIVATE-TOKEN: "{{ gitlab_token }}"
    validate_certs: false
    status_code: 201
  register: r_project
  retries: 5
  delay: 10

- name: register project id
  set_fact:
    gitlab_project_id: "{{ r_project.json.id }}"
  when: r_project.status == 201

- name: wait for import to complete
  uri:
    url: https://{{ gitlab_host }}/api/v4/projects/{{ gitlab_project_id }}/import
    method: GET
    headers:
      PRIVATE-TOKEN: "{{ gitlab_token }}"
    validate_certs: false
    return_content: true
  register: import_status
  until: import_status.json.import_status == "finished"
  retries: 30
  delay: 10


#- name: import remote repository
#  uri:
#    url: https://{{ gitlab_host }}/api/v4/projects/{{ project_id }}/repository/import
#    method: POST
#    body_format: form-urlencoded
#    body:
#      repository_url: "{{ templates_repo_url }}.git"
#    headers:
#      PRIVATE-TOKEN: "{{ gitlab_token }}"
#    validate_certs: false
#    #status_code: 201
#  register: r_import
  #retries: 5
  #delay: 10

#- name: debug
#  ansible.builtin.debug:
#    msg: "{{ r_import }}"

- name: enable repository mirroring
  uri:
    url: https://{{ gitlab_host }}/api/v4/projects/{{ project_id }}/mirror/pull
    method: PUT
    body_format: form-urlencoded
    body:
      enabled: "true"
      url: "{{ templates_repo_url }}.git"
    headers:
      PRIVATE-TOKEN: "{{ gitlab_token }}"
    validate_certs: false
    #status_code: 201
  register: r_mirroring
  #retries: 5
  #delay: 10

- name: debug
  ansible.builtin.debug:
    msg: "{{ r_mirroring }}"

# Leave these as the last tasks in the playbook
- name: clone_repo tasks complete
  debug:
    msg: "Clone repo tasks completed successfully."
  when:
    - not silent|bool